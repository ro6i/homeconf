#!/bin/bash

trap ctrl_c INT

function ctrl_c() {
  exit 1
}

_port="$1"; shift
_status_code="200"
_content="$(cat <&0)"
# _content="$(cat -)"
_content_length=$(( $(echo -e "$_content" | wc -c) - 0 ))
declare -A _http_codes=(\
  ["100"]="100 Continue" \
  ["200"]="200 OK" \
  ["201"]="201 Created" \
  ["202"]="202 Accepted" \
  ["301"]="301 Moved Permanently" \
  ["400"]="400 Bad Request" \
  ["401"]="401 Unauthorized" \
  ["403"]="403 Forbidden" \
  ["404"]="404 Not Found" \
  ["405"]="405 Method Not Allowed" \
  ["406"]="406 Not Acceptable" \
  ["407"]="407 Proxy Authentication Required" \
  ["408"]="408 Request Timeout" \
  ["409"]="409 Conflict" \
  ["410"]="410 Gone" \
  ["429"]="429 Too Many Requests" \
  ["500"]="500 Internal Server Error" \
  ["501"]="501 Not Implemented" \
  ["502"]="502 Bad Gateway" \
  ["503"]="503 Service Unavailable" \
  ["504"]="504 Gateway Timeout" \
  ["511"]="511 Network Authentication Required" \
  ["599"]="599 Network Connect Timeout Error" \
  )

ARGS=`getopt --name 'http-echo' --options 'sc' --longoptions status: -- "$@"`
eval set -- "$ARGS"

while true
do
  case "$1" in
    --status-code|--status)
        case "$2" in
          "")
            shift 2 ;;
          *)
            _status_code="$2"
            shift 2 ;;
        esac ;;
    --)
      shift
      break ;;
    *)
      echo "error parsing args"
      exit 1 ;;
  esac
done

_status="${_http_codes[$_status_code]}"

echo -e "HTTP Server mock started on port $_port:"

while true
do

  echo -e "\
HTTP/1.1 $_status\r\n\
Date: $(date)\r\n\
Content-type: application/json\r\n\
Content-length: $_content_length\r\n\r\n\
${_content}" \
|  nc -l -v -p $_port

  echo ""
  echo "=/="
done
