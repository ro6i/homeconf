#!/bin/bash

function help {
cat <<'EOF'
usage: d6 <spec> <tool> <dsn-token> [options]
   or: d6 --help

Arguments:
  <spec>        mongo | { redshift | postgres } | mssql | redis | cassandra | astra | bypass
  <tool>        shell | uri | unload | load
  <dsn-token>   token from DSN conf

Options (DSN overrides):
  --format                Format in which the output is presented

  --host                  overrides 'host'
  --port                  overrides 'port'
  --database              overrides 'database'
  --username              overrides 'username'
  --password              overrides 'password'
  --secure-bundle         overrides 'secure-bundle'
  --connect-timeout       overrides 'connect-timeout'

EOF
}

case $1 in
  -h | --help)
    help; exit 0 ;;
  *) ;;
esac

function error {
  if [ -t 1 ]
  then
    >&2 echo -e "$(tput setaf 1)${1}$(tput sgr0)"
  else
    >&2 echo -e "$1"
  fi
}

# Set the DSN configuration path
_rc_path="$HOME/.config/d6/rc.conf.yml"
_dsn_conf_dir="$HOME"
if [[ -f "$_rc_path" ]]
then
  _dsn_conf_dir=$(yq e '.dsn-conf-dir' "$_rc_path")
fi
_dsn_conf_path="${_dsn_conf_dir}/.dsn.conf.yml"
if [[ ! -f "$_dsn_conf_path" ]]
then
  error "Cannot find configuration file $_dsn_conf_path"; exit 1
fi

# specification of dbms
SPEC="$1"; shift
# a specific tool fromt the supported toolset
# shell - runs a cli shell/tool for the dbms specified by $SPEC
# uri - outputs connection strings in a format specified by $FORMAT
TOOL="$1"; shift
FORMAT=''
# name of the token to read the connection attributes from
NAME="$1"; shift

# read all the optional arguments
ARGS=`getopt --name 'database-tool' --options 'asc' --longoptions database,format: -- "$@"`
eval set -- "$ARGS"

# parameters can be overridden
while true
do
  case "$1" in
    --database)
        case "$2" in
          '') shift 2 ;;
          *) _map[database]="$2"; shift 2 ;;
        esac ;;
    --format)
        case "$2" in
          '') shift 2 ;;
          *) FORMAT="$2"; shift 2 ;;
        esac ;;
    --) shift; break ;;
    *) echo 'error parsing args'; exit 1
  esac
done

# validate all positional arguments
case $SPEC in
  'bypass')
    case "$FORMAT" in
      '' | - | -- | default) ;;
      *) error "'$FORMAT' output format is not supported"; exit 1
    esac
    ;;
  'mongo')
    case "$FORMAT" in
      '' | - | -- | default) ;;
      *) error "'$FORMAT' output format is not supported"; exit 1
    esac
    ;;
  'redshift' | 'postgres')
    case "$FORMAT" in
      '' | csv | psycopg | - | -- | default) ;;
      *) error "'$FORMAT' format is not supported"; exit 1
    esac
    ;;
  'mssql')
    ;;
  'redis')
    case "$FORMAT" in
      '' | - | -- | default) ;;
      *) error "'$FORMAT' format is not supported"; exit 1
    esac
    ;;
  'cassandra' | 'astra')
    case "$FORMAT" in
      '' | json | csv | - | -- | default) ;;
      *) error "'$FORMAT' format is not supported"; exit 1
    esac
    ;;
  *) error "'$SPEC' spec is not supported"; exit 1
esac

case $TOOL in
  'shell' | 'uri' | 'unload' | 'load') ;;
  *) error "'$TOOL' is not a valid argument"; exit 1
esac

_scope="$SPEC"

# read database connection attributes into a map
declare -A _map
for FIELD in host port database username password passkey app connect-timeout secure-bundle
do
  _key="$(echo "$FIELD" | sed 's/-/_/g')"
  _map[$_key]="$(yq e ".$_scope.$NAME.$FIELD" "$_dsn_conf_path")"
done

# use keyring if passkey is specified
if [[ "${_map[username]}" == 'null' ]]
then
  _map[username]="$(secret-tool lookup "d6:$_scope.$NAME" 'username')"
fi
if [[ "${_map[password]}" == 'null' ]]
then
  _map[password]="$(secret-tool lookup "d6:$_scope.$NAME" 'password')"
fi

# make sure there is no 'null' value returned by `yq`
# in case the attribute could not be found
if [[ "${SPEC}" != "bypass" ]]
then
  for FIELD in database
  do
    if [[ "${_map[$FIELD]}" == 'null' ]]
    then
      error "$_scope.$NAME.$FIELD must not be 'null'"; exit 1
    fi
  done
fi

_start_time="$(date -u +%s)"

case $SPEC in
  "bypass")

      cat
    ;;
  "mongo")

    case "$FORMAT" in
      - | -- | default) ;;
    esac

    _uri="mongodb://${_map[host]}:${_map[port]}/${_map[database]}"

    case $TOOL in
      "shell") mongo --quiet "$_uri" ;;
      "uri") echo "$_uri" ;;
    esac
    ;;

  'redshift' | 'postgres')

    case $TOOL in
      'shell')
        _psql_params=
        _csv_params='--no-align --field-separator "," --pset footer'

        case "$FORMAT" in
          csv) _psql_params=$_csv_params ;;
          - | -- | default) ;;
        esac

        PGPASSWORD="${_map[password]}" psql ${_psql_params} -h ${_map[host]} -U ${_map[username]} -d ${_map[database]} -p ${_map[port]} --quiet
        ;;
      'uri')
        case "$FORMAT" in
          psycopg)
            echo "host='${_map[host]}' port=${_map[port]} dbname='${_map[database]}' user='${_map[username]}' password='${_map[password]}'"
            ;;
          - | -- | default)
            error "$SPEC $TOOL output format must be specified explicitly" ;;
        esac
        ;;
    esac
    ;;

  "mssql")

    case $TOOL in
      'shell')
        $(isql '$NAME' '${_map[username]}' '${_map[password]}')
        ;;
      'uri')
        error "$SPEC $TOOL not supported" ;;
    esac
    ;;

  'redis')

    case $TOOL in
      'shell')
        redis-cli -u "redis://${_map[username]}:${_map[password]}@${_map[host]}:${_map[port]}"
        ;;
      'uri')
        error "$SPEC $TOOL not supported" ;;
    esac
    ;;

  'cassandra' | 'astra')

    case $TOOL in
      'shell')
        if [[ -z "${_map[secure_bundle]}" ]]
        then
          cqlsh -u "${_map[username]}" -p "${_map[password]}" --connect-timeout="${_map[connect_timeout]:-120}" "${_map[host]}" "${_map[port]}"
        else
          cd ~/projects/tools/cqlsh/bin/
          ./cqlsh -u "${_map[username]}" -p "${_map[password]}" -b "${_map[secure_bundle]}" --connect-timeout="${_map[connect_timeout]:-120}" --request-timeout=12000 --no-color
        fi
        ;;

      'unload')
        output_format="${FORMAT:-json}"
        if [[ -z "$DSBULK_KEYSPACE" ]]
        then
          unset lines
          readarray lines < <(cat -)
          q=
          for i in ${!lines[@]}; do
              q="$q ${lines[i]}"
          done
          query=$(echo "$q" | tr '\n' ' ')
          cd ~/projects/tools/dsbulk-1.8.0/bin/
          ./dsbulk unload -query "$query" -u "${_map[username]}" -p "${_map[password]}" -b "${_map[secure_bundle]}" --connect-timeout=20 --request-timeout=12000 -c "$output_format"
        else
          cd ~/projects/tools/dsbulk-1.8.0/bin/
          ./dsbulk unload -k "${DSBULK_KEYSPACE}" -t "${DSBULK_TABLE}" -delim '\t' -u "${_map[username]}" -p "${_map[password]}" -b "${_map[secure_bundle]}" --connect-timeout=120 --request-timeout=12000 -c "$output_format"
        fi
        ;;

      'load')
        output_format="${FORMAT:-json}"
        echo "secure-bundle: ${_map[secure_bundle]}"
        cd ~/projects/tools/dsbulk-1.8.0/bin/
        ./dsbulk load -k "${DSBULK_KEYSPACE}" -t "${DSBULK_TABLE}" -delim '\t' -u "${_map[username]}" -p "${_map[password]}" -b "${_map[secure_bundle]}" --connect-timeout=120 --request-timeout=12000 -c "$output_format"
        # echo "-k ${DSBULK_KEYSPACE} -t ${DSBULK_TABLE} -delim '\t' -u ${_map[username]} -p ${_map[password]} -b ${_map[secure_bundle]} --connect-timeout=20 --request-timeout=6000 -c $output_format"
        ;;

      'uri')
        error "$SPEC $TOOL not supported" ;;
    esac
    ;;
esac

_end_time="$(date -u +%s)"

_elapsed="$(($_end_time-$_start_time))"
>&2 echo "[$_elapsed second(s)]"
